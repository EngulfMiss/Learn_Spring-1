<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <context:component-scan base-package="com.mildlamb.mapper"></context:component-scan>
    <context:annotation-config></context:annotation-config>

    <!-- DataSource:使用spring的数据源 替换 mybatis的配置
        使用spring提供的JDBC
     -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8"></property>
        <property name="username" value="root"></property>
        <property name="password" value="W2kindred"></property>
    </bean>

    <!-- SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <!-- 绑定Mybatis配置文件,绑定以后，你就可以直接通过property来配置核心配置文件了 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <property name="typeAliasesPackage" value="com.mildlamb.pojo"></property>
        <property name="mapperLocations" value="classpath:com/mildlamb/mapper/UserMapper.xml"></property>
    </bean>

    <!-- 实现类 -->
    <bean id="userMapper" class="com.mildlamb.mapper.UserMapperImpl">
        <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
    </bean>




    <!-- 配置声明式事务 -->
    <!-- 创建transactionManager事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>

<!--    &lt;!&ndash; 结合AOP实现事务的织入 &ndash;&gt;-->
<!--    &lt;!&ndash; 配置事务的通知 &ndash;&gt;-->
<!--    <tx:advice id="txAdvice" transaction-manager="transactionManager">-->
<!--        &lt;!&ndash; 给哪些方法配置事务 &ndash;&gt;-->
<!--        &lt;!&ndash; 还可以配置事务的传播特性 &ndash;&gt;-->
<!--        <tx:attributes>-->
<!--            <tx:method name="add*" propagation="REQUIRED"/>-->
<!--            <tx:method name="del*" propagation="REQUIRED"/>-->
<!--            <tx:method name="update*" propagation="REQUIRED"/>-->
<!--            <tx:method name="select*" read-only="true"/>-->
<!--            <tx:method name="query*" read-only="true"/>-->
<!--        </tx:attributes>-->
<!--    </tx:advice>-->


<!--    &lt;!&ndash; 配置事务的切入 &ndash;&gt;-->
<!--    <aop:config>-->
<!--        <aop:pointcut id="pointcut" expression="execution(* com.mildlamb.mapper.*.*(..))"/>-->
<!--        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"></aop:advisor>-->
<!--    </aop:config>-->

</beans>